use case
Chapter 15: 
logical pieces -> System
Layered
Good Architecture -> easy

Policy == function
input -> output

Level of policy
Low : ex. close to input and output , getting input, printing output
high: core logic. 

Entity: shared by applications
methods (rules/policies) + attributes (data)
== a set of Classes 
Highest level core policy

Use case: application specific, uses entities
Each function of the program, action user can take, a single interaction.
input, output, result
Choosing usecases is a usecase
Calling actual methods, (main) 

Interface adapter: converts input from user to parameters used by use case. 
ex. controller, button on UI -> call use case. 

Frameworks & Drivers: details : UI, databases, outside APIs  

Flow of dependency (method call) : outside to insdie,        inside to outside -> dependency inversion -> interfaces on the outside layers.
Name of things (imports) in the outer layer should not be in the inner layer.

Can't skip layer


DS = data structure, just storage, only have 

Use case layer: Use Case Interactor + Interfaces (services interactor needs) + data

Out put boundary interface -> output of use case

Input Boundary: API for use case, how to call it. Pass info into use case

Use case changes view model - > view has listener -> updates accordingly

Data Access interface : Use case may need outside data,

View : display output, get input from user
controller (input boundary) -> convert input to format param of use case
Use case: does work, delegate work to Data Interface/ Entities
get output to output boundary, changes view model and thus view

Core logic: Interfaces, Use case, Entities 





1 function -> 1 use case -> 1 Interactor 

persistence layer -> Data Access 
UI -> Output boundry
API -> Input boundry
Meaning that useCaseInteractor Implements InputBoundry
Create entity: Factory

Interactor class : 4 interfaces 

Sequence diagrams: call stacks, stops at interface

Alt S

entities: user and factory

view, data access, entity can be shared by use cases,
interfaces cannot.
app: construct GUI, use case factories.
view: panels




